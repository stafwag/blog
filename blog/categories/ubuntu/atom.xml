<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ubuntu | stafwag Blog]]></title>
  <link href="https://stafwag.github.io/blog/blog/categories/ubuntu/atom.xml" rel="self"/>
  <link href="https://stafwag.github.io/blog/"/>
  <updated>2019-05-12T09:59:28+02:00</updated>
  <id>https://stafwag.github.io/blog/</id>
  <author>
    <name><![CDATA[staf wagemakers]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building Your Own Docker Base Images (Part 1: Debian GNU/Linux & Co)]]></title>
    <link href="https://stafwag.github.io/blog/blog/2019/04/22/building-your-own-docker-images_part1/"/>
    <updated>2019-04-22T10:36:01+02:00</updated>
    <id>https://stafwag.github.io/blog/blog/2019/04/22/building-your-own-docker-images_part1</id>
    <content type="html"><![CDATA[<p>I was using <a href="https://stafwag.github.io/blog/blog/2015/12/26/running-docker-on-arm/">docker on an Odroid U3</a>, but my Odroid stopped working. I switched to another system that is i386 only.</p>

<p>You&rsquo;ll find my journey to build docker images for i386 below.</p>

<h1>Reasons to build your own docker images</h1>

<p>If you want to use <a href="https://www.docker.com/">docker</a> you can start with docker images on the <a href="https://hub.docker.com/">docker registry</a>.
There are several reasons to build your own base images.</p>

<ul>
<li><h2>Security</h2></li>
</ul>


<p>The first reason is security, docker images are not signed by default.</p>

<p>Anyone can upload docker images to the public docker hub with bugs or malicious code.</p>

<p>There are &ldquo;official&rdquo; docker images available at <a href="https://docs.docker.com/docker-hub/official_images/">https://docs.docker.com/docker-hub/official_images/</a> when you execute a <code>docker search</code>  the official docker images are tagged on the official column and are also signed by Docker. To only allow signed docker images you need to set the <code>DOCKER_CONTENT_TRUST=1</code> environment variable. - This should be the default IMHO -</p>

<p>There is one distinction, the &ldquo;official&rdquo; docker images are signed by the &ldquo;Repo admin&rdquo; of the Docker hub, not by the official GNU/Linux distribution project.
If you want to trust the official project instead of the Docker repo admin you can resolve this building your own images.</p>

<ul>
<li><h2>Support other architectures</h2></li>
</ul>


<p>Docker images are generally built for <a href="https://en.wikipedia.org/wiki/X86-64">AMD64 architecture</a>. If you want to use other architectures - <a href="https://en.wikipedia.org/wiki/ARM_architecture">ARM</a>, <a href="https://en.wikipedia.org/wiki/Power.org#Power_Architecture">Power</a>, <a href="https://en.wikipedia.org/wiki/SPARC">SPARC</a> or even <a href="https://en.wikipedia.org/wiki/Intel_80386">i386</a> - you&rsquo;ll find some images on the Docker hub but these are usually not Official docker images.</p>

<ul>
<li><h2>Control</h2></li>
</ul>


<p>When you build your own images, you have more control over what goes or not goes into the image.</p>

<h1>Building your own docker base images</h1>

<p>There are several ways to build your own docker images.</p>

<p>The <a href="https://mobyproject.org/">Mobyproject</a> is Docker&rsquo;s development project - a bit like what Fedora is to RedHat -.
The Moby project has a few scripts that help you to create docker base images and is also a good start if you want to review how to build your own images.</p>

<h1>GNU/Linux distributions</h1>

<p>I build the images on the same GNU/Linux distribution (e.g. The debian images are build on a Debian system) to get the correct gpg keys.</p>

<h2>Debian GNU/Linux &amp; Co</h2>

<p>Debian GNU/Linux makes it very easy to build your own Docker base images. Only debootstrap is required.
I&rsquo;ll use the moby script to the Debian base image and debootstrap to build an i386 docker Ubuntu 18.04 image.</p>

<p>Ubuntu doesn&rsquo;t support i386 officially but includes the i386 userland so it&rsquo;s possible to build i386 Docker images.</p>

<h3>Clone moby</h3>

<pre><code>staf@whale:~/github$ git clone https://github.com/moby/moby
Cloning into 'moby'...
remote: Enumerating objects: 265639, done.
remote: Total 265639 (delta 0), reused 0 (delta 0), pack-reused 265640
Receiving objects: 99% (265640/265640), 137.75 MiB | 3.05 MiB/s, done.
Resolving deltas: 99% (179885/179885), done.
Checking out files: 99% (5508/5508), done.
staf@whale:~/github$ 
</code></pre>

<h3>Make sure that debootstrap is installed</h3>

<pre><code>staf@whale:~/github/moby/contrib$ sudo apt install debootstrap
[sudo] password for staf: 
Reading package lists... Done
Building dependency tree       
Reading state information... Done
debootstrap is already the newest version (1.0.114).
debootstrap set to manually installed.
0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
staf@whale:~/github/moby/contrib$ 
</code></pre>

<h3>The Moby way</h3>

<h4>Go to the contrib directory</h4>

<pre><code>staf@whale:~/github$ cd moby/contrib/
staf@whale:~/github/moby/contrib$ 
</code></pre>

<h4>mkimage.sh</h4>

<p> <code>mkimage.sh --help</code> gives you more details howto use the script.</p>

<pre><code>staf@whale:~/github/moby/contrib$ ./mkimage.sh --help
usage: mkimage.sh [-d dir] [-t tag] [--compression algo| --no-compression] script [script-args]
   ie: mkimage.sh -t someuser/debian debootstrap --variant=minbase jessie
       mkimage.sh -t someuser/ubuntu debootstrap --include=ubuntu-minimal --components=main,universe trusty
       mkimage.sh -t someuser/busybox busybox-static
       mkimage.sh -t someuser/centos:5 rinse --distribution centos-5
       mkimage.sh -t someuser/mageia:4 mageia-urpmi --version=4
       mkimage.sh -t someuser/mageia:4 mageia-urpmi --version=4 --mirror=http://somemirror/
staf@whale:~/github/moby/contrib$ 
</code></pre>

<h4>build the image</h4>

<pre><code>staf@whale:~/github/moby/contrib$ sudo ./mkimage.sh -t stafwag/debian_i386:stretch debootstrap --variant=minbase stretch
[sudo] password for staf: 
+ mkdir -p /var/tmp/docker-mkimage.dY9y9apEoK/rootfs
+ debootstrap --variant=minbase stretch /var/tmp/docker-mkimage.dY9y9apEoK/rootfs
I: Target architecture can be executed
I: Retrieving InRelease 
I: Retrieving Release 
I: Retrieving Release.gpg 
I: Checking Release signature
I: Valid Release signature (key id 067E3C456BAE240ACEE88F6FEF0F382A1A7B6500)
I: Retrieving Packages 
&lt;snip&gt;
</code></pre>

<h4>Test</h4>

<p>Verify that images is imported.</p>

<pre><code>staf@whale:~/github/moby/contrib$ docker images
REPOSITORY            TAG                 IMAGE ID            CREATED              SIZE
stafwag/debian_i386   stretch             cb96d1663079        About a minute ago   97.6MB
staf@whale:~/github/moby/contrib$ 
</code></pre>

<p>Run a test docker instance</p>

<pre><code>staf@whale:~/github/moby/contrib$ docker run -t -i --rm stafwag/debian_i386:stretch /bin/sh
# cat /etc/debian_version 
9.8
# 
</code></pre>

<h3>The debootstrap way</h3>

<h4>Make sure that debootstrap is installed</h4>

<pre><code>staf@ubuntu184:~/github/moby$ sudo apt install debootstrap
Reading package lists... Done
Building dependency tree       
Reading state information... Done
Suggested packages:
  ubuntu-archive-keyring
The following NEW packages will be installed:
  debootstrap
0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.
Need to get 35,7 kB of archives.
After this operation, 270 kB of additional disk space will be used.
Get:1 http://be.archive.ubuntu.com/ubuntu bionic-updates/main amd64 debootstrap all 1.0.95ubuntu0.3 [35,7 kB]
Fetched 35,7 kB in 0s (85,9 kB/s)    
Selecting previously unselected package debootstrap.
(Reading database ... 163561 files and directories currently installed.)
Preparing to unpack .../debootstrap_1.0.95ubuntu0.3_all.deb ...
Unpacking debootstrap (1.0.95ubuntu0.3) ...
Processing triggers for man-db (2.8.3-2ubuntu0.1) ...
Setting up debootstrap (1.0.95ubuntu0.3) ...
staf@ubuntu184:~/github/moby$ 
</code></pre>

<h4>bootsrap</h4>

<p>Create a directory that will hold the chrooted operating system.</p>

<pre><code>staf@ubuntu184:~$ mkdir -p dockerbuild/ubuntu
staf@ubuntu184:~/dockerbuild/ubuntu$ 
</code></pre>

<p>Bootstrap.</p>

<pre><code>staf@ubuntu184:~/dockerbuild/ubuntu$ sudo debootstrap --verbose --include=iputils-ping --arch i386 bionic ./chroot-bionic http://ftp.ubuntu.com/ubuntu/
I: Retrieving InRelease 
I: Checking Release signature
I: Valid Release signature (key id 790BC7277767219C42C86F933B4FE6ACC0B21F32)
I: Validating Packages 
I: Resolving dependencies of required packages...
I: Resolving dependencies of base packages...
I: Checking component main on http://ftp.ubuntu.com/ubuntu...
I: Retrieving adduser 3.116ubuntu1
I: Validating adduser 3.116ubuntu1
I: Retrieving apt 1.6.1
I: Validating apt 1.6.1
I: Retrieving apt-utils 1.6.1
I: Validating apt-utils 1.6.1
I: Retrieving base-files 10.1ubuntu2
&lt;snip&gt;
I: Configuring python3-yaml...
I: Configuring python3-dbus...
I: Configuring apt-utils...
I: Configuring netplan.io...
I: Configuring nplan...
I: Configuring networkd-dispatcher...
I: Configuring kbd...
I: Configuring console-setup-linux...
I: Configuring console-setup...
I: Configuring ubuntu-minimal...
I: Configuring libc-bin...
I: Configuring systemd...
I: Configuring ca-certificates...
I: Configuring initramfs-tools...
I: Base system installed successfully.
</code></pre>

<h4>Customize</h4>

<p>You can customize your installation before it goes into the image. One thing that you should customize is include update in the image.</p>

<p>Update <code>/etc/resolve.conf</code></p>

<pre><code>staf@ubuntu184:~/dockerbuild/ubuntu$ sudo vi chroot-bionic/etc/resolv.conf
</code></pre>

<pre><code>nameserver 9.9.9.9
</code></pre>

<p>Update <code>/etc/apt/sources.list</code></p>

<pre><code>staf@ubuntu184:~/dockerbuild/ubuntu$ sudo vi chroot-bionic/etc/apt/sources.list
</code></pre>

<p>And include the updates</p>

<pre><code>deb http://ftp.ubuntu.com/ubuntu bionic main
deb http://security.ubuntu.com/ubuntu bionic-security main
deb http://ftp.ubuntu.com/ubuntu/ bionic-updates main
</code></pre>

<p>Chroot into your installation and run <code>apt-get update</code></p>

<pre><code>staf@ubuntu184:~/dockerbuild/ubuntu$ sudo chroot $PWD/chroot-bionic
root@ubuntu184:/# apt update
Hit:1 http://ftp.ubuntu.com/ubuntu bionic InRelease
Get:2 http://ftp.ubuntu.com/ubuntu bionic-updates InRelease [88.7 kB]   
Get:3 http://security.ubuntu.com/ubuntu bionic-security InRelease [88.7 kB]       
Get:4 http://ftp.ubuntu.com/ubuntu bionic/main Translation-en [516 kB]                  
Get:5 http://ftp.ubuntu.com/ubuntu bionic-updates/main i386 Packages [492 kB]           
Get:6 http://ftp.ubuntu.com/ubuntu bionic-updates/main Translation-en [214 kB]          
Get:7 http://security.ubuntu.com/ubuntu bionic-security/main i386 Packages [241 kB]     
Get:8 http://security.ubuntu.com/ubuntu bionic-security/main Translation-en [115 kB]
Fetched 1755 kB in 1s (1589 kB/s)      
Reading package lists... Done
Building dependency tree... Done
</code></pre>

<p>and <code>apt-get upgrade</code></p>

<pre><code>root@ubuntu184:/# apt upgrade
Reading package lists... Done
Building dependency tree... Done
Calculating upgrade... Done
The following NEW packages will be installed:
  python3-netifaces
The following packages will be upgraded:
  apt apt-utils base-files bsdutils busybox-initramfs console-setup console-setup-linux
  distro-info-data dpkg e2fsprogs fdisk file gcc-8-base gpgv initramfs-tools
  initramfs-tools-bin initramfs-tools-core keyboard-configuration kmod libapparmor1
  libapt-inst2.0 libapt-pkg5.0 libblkid1 libcom-err2 libcryptsetup12 libdns-export1100
  libext2fs2 libfdisk1 libgcc1 libgcrypt20 libglib2.0-0 libglib2.0-data libidn11
  libisc-export169 libkmod2 libmagic-mgc libmagic1 libmount1 libncurses5 libncursesw5
  libnss-systemd libpam-modules libpam-modules-bin libpam-runtime libpam-systemd
  libpam0g libprocps6 libpython3-stdlib libpython3.6-minimal libpython3.6-stdlib
  libseccomp2 libsmartcols1 libss2 libssl1.1 libstdc++6 libsystemd0 libtinfo5 libudev1
  libunistring2 libuuid1 libxml2 mount ncurses-base ncurses-bin netcat-openbsd
  netplan.io networkd-dispatcher nplan openssl perl-base procps python3 python3-gi
  python3-minimal python3.6 python3.6-minimal systemd systemd-sysv tar tzdata
  ubuntu-keyring ubuntu-minimal udev util-linux
84 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.
Need to get 26.6 MB of archives.
After this operation, 450 kB of additional disk space will be used.
Do you want to continue? [Y/n] y
Get:1 http://security.ubuntu.com/ubuntu bionic-security/main i386 netplan.io i386 0.40.1~18.04.4 [64.6 kB]
Get:2 http://ftp.ubuntu.com/ubuntu bionic-updates/main i386 base-files i386 10.1ubuntu2.4 [60.3 kB]
Get:3 http://security.ubuntu.com/ubuntu bionic-security/main i386 libapparmor1 i386 2.12-4ubuntu5.1 [32.7 kB]
Get:4 http://security.ubuntu.com/ubuntu bionic-security/main i386 libgcrypt20 i386 1.8.1-
&lt;snip&gt;
running python rtupdate hooks for python3.6...
running python post-rtupdate hooks for python3.6...
Setting up initramfs-tools-core (0.130ubuntu3.7) ...
Setting up initramfs-tools (0.130ubuntu3.7) ...
update-initramfs: deferring update (trigger activated)
Setting up python3-gi (3.26.1-2ubuntu1) ...
Setting up file (1:5.32-2ubuntu0.2) ...
Setting up python3-netifaces (0.10.4-0.1build4) ...
Processing triggers for systemd (237-3ubuntu10.20) ...
Setting up networkd-dispatcher (1.7-0ubuntu3.3) ...
Installing new version of config file /etc/default/networkd-dispatcher ...
Setting up netplan.io (0.40.1~18.04.4) ...
Setting up nplan (0.40.1~18.04.4) ...
Setting up ubuntu-minimal (1.417.1) ...
Processing triggers for libc-bin (2.27-3ubuntu1) ...
Processing triggers for initramfs-tools (0.130ubuntu3.7) ...
root@ubuntu184:/# 
staf@ubuntu184:~/dockerbuild/ubuntu$ 
</code></pre>

<h4>Import</h4>

<p>Go to your chroot installation.</p>

<pre><code>staf@ubuntu184:~/dockerbuild/ubuntu$ cd chroot-bionic/
staf@ubuntu184:~/dockerbuild/ubuntu/chroot-bionic$ 
</code></pre>

<p>and import the image.</p>

<pre><code>staf@ubuntu184:~/dockerbuild/ubuntu/chroot-bionic$ sudo tar cpf - . | docker import - stafwag/ubuntu_i386:bionic
sha256:83560ef3c8d48b737983ab8ffa3ec3836b1239664f8998038bfe1b06772bb3c2
staf@ubuntu184:~/dockerbuild/ubuntu/chroot-bionic$ 
</code></pre>

<h4>Test</h4>

<pre><code>staf@ubuntu184:~/dockerbuild/ubuntu/chroot-bionic$ docker images
REPOSITORY            TAG                 IMAGE ID            CREATED              SIZE
stafwag/ubuntu_i386   bionic              83560ef3c8d4        About a minute ago   315MB
staf@ubuntu184:~/dockerbuild/ubuntu/chroot-bionic$ 
</code></pre>

<pre><code>staf@ubuntu184:~/dockerbuild/ubuntu/chroot-bionic$ docker run -it --rm stafwag/ubuntu_i386:bionic /bin/bash
root@665cec6ee24f:/# lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 18.04.2 LTS
Release:        18.04
Codename:       bionic
root@665cec6ee24f:/# 
</code></pre>

<p><strong><em> Have fun! </em></strong></p>

<h1>Links</h1>

<ul>
<li><a href="https://docs.docker.com/docker-hub/official_images/">https://docs.docker.com/docker-hub/official_images/</a></li>
<li><a href="https://docs.docker.com/engine/security/trust/content_trust/">https://docs.docker.com/engine/security/trust/content_trust/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Howto Use Centos Cloud Images With Cloud-init on KVM/libvirtd]]></title>
    <link href="https://stafwag.github.io/blog/blog/2019/03/03/howto-use-centos-cloud-images-with-cloud-init/"/>
    <updated>2019-03-03T09:55:55+01:00</updated>
    <id>https://stafwag.github.io/blog/blog/2019/03/03/howto-use-centos-cloud-images-with-cloud-init</id>
    <content type="html"><![CDATA[<h1>Images versus unattended setup</h1>

<h2>Old-school</h2>

<h3>Unattended setup</h3>

<p>In a traditional environment, systems are installed from a CDROM. The configuration is executed by the system administrator through the installer. This soon becomes a borning and unpractical task when we need to set up a lot of systems also it is important  that systems are configured in same - and hopefully correct - way.</p>

<p>In a traditional environment, this can be automated by booting via BOOTP/PXE boot and configured is by a system that &ldquo;feeds&rdquo; the installer. Examples are:</p>

<ul>
<li><a href="https://en.wikipedia.org/wiki/JumpStart_(Solaris">Solaris Jumpstart</a></li>
<li><a href="https://en.wikipedia.org/wiki/Kickstart_(Linux">Redhat Kickstart</a>)</li>
<li><a href="https://wiki.debian.org/DebianInstaller/Preseed">DebianInstaller Preseed</a></li>
<li><a href="https://en.wikipedia.org/wiki/YaST#AutoYaST">Suse Autoyast</a></li>
<li>&hellip;</li>
</ul>


<h2>Cloud &amp; co</h2>

<h3>Cloud-init</h3>

<p>In a cloud environment, we use images to install systems. The system automation is generally done by <a href="https://cloud-init.io/">cloud-init</a>. Cloud-init was originally developed for Ubuntu GNU/Linux on the Amazon EC2 cloud. It has become the de facto installation configuration tool for most Unix like systems on most cloud environments.</p>

<p>Cloud-init uses a YAML file to configure the system.</p>

<h3>Images</h3>

<p>Most GNU/Linux distributions provide images that can be used to provision a new system.
You can find the complete list on the OpenStack website</p>

<p><a href="https://docs.openstack.org/image-guide/obtain-images.html">https://docs.openstack.org/image-guide/obtain-images.html</a></p>

<p>The OpenStack documentation also describes how you can create your own base images in the <a href="https://docs.openstack.org/image-guide/">OpenStack Virtual Machine Image Guide</a></p>

<h1>Use a centos cloud image with libvirtd</h1>

<h2>Download the cloud image</h2>

<h3>Download</h3>

<p>Download the latest &ldquo;GenericCloud&rdquo; centos 7 cloud image and sha256sum.txt.asc sha256sum.txt from:</p>

<p><a href="https://cloud.centos.org/centos/7/images/">https://cloud.centos.org/centos/7/images/</a></p>

<h3>Verify</h3>

<p>You should verify your download - as always against a trusted signing key -</p>

<p>On a centos 7 system, the public gpg is already installed at <code>/etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</code></p>

<h4>Verify the fingerprint</h4>

<p>Execute</p>

<pre><code>staf@centos7 iso]$ gpg --with-fingerprint /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7
pub  4096R/F4A80EB5 2014-06-23 CentOS-7 Key (CentOS 7 Official Signing Key) &lt;security@centos.org&gt;
      Key fingerprint = 6341 AB27 53D7 8A78 A7C2  7BB1 24C6 A8A7 F4A8 0EB5
[staf@centos7 iso]$ gpg --with-fingerprint /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7
</code></pre>

<p>and verify the fingerprint, the fingerprints that are used by centos are listed at:</p>

<p><a href="https://www.centos.org/keys/">https://www.centos.org/keys/</a></p>

<h4>Import key</h4>

<p>Import the pub centos gpg key:</p>

<pre><code>[staf@centos7 iso]$ gpg --import /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7
gpg: key F4A80EB5: public key "CentOS-7 Key (CentOS 7 Official Signing Key) &lt;security@centos.org&gt;" imported
gpg: Total number processed: 1
gpg:               imported: 1  (RSA: 1)
[staf@centos7 iso]$ 
</code></pre>

<p>List the trusted gpg key:</p>

<pre><code>staf@centos7 iso]$ gpg --list-keys
/home/staf/.gnupg/pubring.gpg
-----------------------------
pub   4096R/F4A80EB5 2014-06-23
uid                  CentOS-7 Key (CentOS 7 Official Signing Key) &lt;security@centos.org&gt;

[staf@centos7 iso]$ gpg --list-keys
</code></pre>

<h4>Verify the sha256sum file</h4>

<pre><code>[staf@centos7 iso]$ gpg --verify sha256sum.txt.asc
gpg: Signature made Thu 31 Jan 2019 04:28:30 PM CET using RSA key ID F4A80EB5
gpg: Good signature from "CentOS-7 Key (CentOS 7 Official Signing Key) &lt;security@centos.org&gt;"
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: 6341 AB27 53D7 8A78 A7C2  7BB1 24C6 A8A7 F4A8 0EB5
[staf@centos7 iso]$ 
</code></pre>

<p>The key fingerprint must match the one of RPM-GPG-KEY-CentOS-7.</p>

<h4>Verify the iso file</h4>

<pre><code>[staf@centos7 iso]$ xz -d CentOS-7-x86_64-GenericCloud-1901.qcow2.xz
[staf@centos7 iso]$ sha256sum -c sha256sum.txt.asc 2&gt;&amp;1 | grep OK
CentOS-7-x86_64-GenericCloud-1901.qcow2: OK
[staf@centos7 iso]$ 
</code></pre>

<h2>Image</h2>

<h3>info</h3>

<p>The image we download is a normal qcow2 image, we can see the image information with <code>qemu-info</code></p>

<pre><code>[root@centos7 iso]# qemu-img info CentOS-7-x86_64-GenericCloud-1901.qcow2
image: CentOS-7-x86_64-GenericCloud-1901.qcow2
file format: qcow2
virtual size: 8.0G (8589934592 bytes)
disk size: 895M
cluster_size: 65536
Format specific information:
    compat: 0.10
[root@centos7 iso]# 
</code></pre>

<h3>Copy &amp; resize</h3>

<p>The default image is small - 8GB - we might be using the image to provision other systems so it better to leave it untouched.</p>

<p>Copy the image to the location where we&rsquo;ll run the virtual system.</p>

<pre><code>[root@centos7 iso]# cp -v CentOS-7-x86_64-GenericCloud-1901.qcow2 /var/lib/libvirt/images/tst/tst.qcow2
'CentOS-7-x86_64-GenericCloud-1901.qcow2' -&gt; '/var/lib/libvirt/images/tst/tst.qcow2'
[root@centos7 iso]# 
</code></pre>

<p>and resize it to the required size:</p>

<pre><code>[root@centos7 iso]# cd /var/lib/libvirt/images/tst
[root@centos7 tst]# qemu-img resize tst.qcow2 20G
Image resized.
[root@centos7 tst]# 
</code></pre>

<h2>cloud-init</h2>

<p>We&rsquo;ll create a simple cloud-init configuration file and generate an iso image with <code>cloud-localds</code>. This iso image holds the cloud-init configuration and will be used to setup the system during the bootstrap.</p>

<h3>Install cloud-utils</h3>

<p><span style="color:red"><strong> It&rsquo;s important to NOT install cloud-init on your KVM host machine. </strong></span> This creates a cloud-init service that runs during the boot and tries to reconfigure your host. Something that you probably don&rsquo;t want on your KVM hypervisor host.</p>

<p>The cloud-util package has all the tool we need to convert the cloud-init configuration files to an iso image.</p>

<pre><code>[root@centos7 tst]# yum install -y cloud-utils
Loaded plugins: fastestmirror, langpacks
Loading mirror speeds from cached hostfile
 * base: centos.cu.be
 * extras: centos.cu.be
 * updates: centos.mirror.ate.info
Resolving Dependencies
--&gt; Running transaction check
---&gt; Package cloud-utils.x86_64 0:0.27-20.el7.centos will be installed
--&gt; Processing Dependency: python-paramiko for package: cloud-utils-0.27-20.el7.centos.x86_64
--&gt; Processing Dependency: euca2ools for package: cloud-utils-0.27-20.el7.centos.x86_64
--&gt; Processing Dependency: cloud-utils-growpart for package: cloud-utils-0.27-20.el7.centos.x86_64
--&gt; Running transaction check
---&gt; Package cloud-utils-growpart.noarch 0:0.29-2.el7 will be installed
---&gt; Package euca2ools.noarch 0:2.1.4-1.el7.centos will be installed
--&gt; Processing Dependency: python-boto &gt;= 2.13.3-1 for package: euca2ools-2.1.4-1.el7.centos.noarch
--&gt; Processing Dependency: m2crypto for package: euca2ools-2.1.4-1.el7.centos.noarch
---&gt; Package python-paramiko.noarch 0:2.1.1-9.el7 will be installed
--&gt; Running transaction check
---&gt; Package m2crypto.x86_64 0:0.21.1-17.el7 will be installed
---&gt; Package python-boto.noarch 0:2.25.0-2.el7.centos will be installed
--&gt; Finished Dependency Resolution

Dependencies Resolved

=======================================================================================
 Package                    Arch         Version                   Repository     Size
=======================================================================================
Installing:
 cloud-utils                x86_64       0.27-20.el7.centos        extras         43 k
Installing for dependencies:
 cloud-utils-growpart       noarch       0.29-2.el7                base           26 k
 euca2ools                  noarch       2.1.4-1.el7.centos        extras        319 k
 m2crypto                   x86_64       0.21.1-17.el7             base          429 k
 python-boto                noarch       2.25.0-2.el7.centos       extras        1.5 M
 python-paramiko            noarch       2.1.1-9.el7               updates       269 k

Transaction Summary
=======================================================================================
Install  1 Package (+5 Dependent packages)

Total download size: 2.5 M
Installed size: 12 M
Downloading packages:
(1/6): cloud-utils-growpart-0.29-2.el7.noarch.rpm               |  26 kB  00:00:01     
(2/6): cloud-utils-0.27-20.el7.centos.x86_64.rpm                |  43 kB  00:00:01     
(3/6): euca2ools-2.1.4-1.el7.centos.noarch.rpm                  | 319 kB  00:00:01     
(4/6): m2crypto-0.21.1-17.el7.x86_64.rpm                        | 429 kB  00:00:01     
(5/6): python-boto-2.25.0-2.el7.centos.noarch.rpm               | 1.5 MB  00:00:02     
(6/6): python-paramiko-2.1.1-9.el7.noarch.rpm                   | 269 kB  00:00:03     
---------------------------------------------------------------------------------------
Total                                                     495 kB/s | 2.5 MB  00:05     
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
  Installing : python-boto-2.25.0-2.el7.centos.noarch                              1/6 
  Installing : python-paramiko-2.1.1-9.el7.noarch                                  2/6 
  Installing : cloud-utils-growpart-0.29-2.el7.noarch                              3/6 
  Installing : m2crypto-0.21.1-17.el7.x86_64                                       4/6 
  Installing : euca2ools-2.1.4-1.el7.centos.noarch                                 5/6 
  Installing : cloud-utils-0.27-20.el7.centos.x86_64                               6/6 
  Verifying  : m2crypto-0.21.1-17.el7.x86_64                                       1/6 
  Verifying  : cloud-utils-growpart-0.29-2.el7.noarch                              2/6 
  Verifying  : python-paramiko-2.1.1-9.el7.noarch                                  3/6 
  Verifying  : python-boto-2.25.0-2.el7.centos.noarch                              4/6 
  Verifying  : euca2ools-2.1.4-1.el7.centos.noarch                                 5/6 
  Verifying  : cloud-utils-0.27-20.el7.centos.x86_64                               6/6 

Installed:
  cloud-utils.x86_64 0:0.27-20.el7.centos                                                                                                                                     

Dependency Installed:
  cloud-utils-growpart.noarch 0:0.29-2.el7      euca2ools.noarch 0:2.1.4-1.el7.centos      m2crypto.x86_64 0:0.21.1-17.el7      python-boto.noarch 0:2.25.0-2.el7.centos     
  python-paramiko.noarch 0:2.1.1-9.el7         

Complete!
[root@centos7 tst]# 
</code></pre>

<h3>Cloud-init configuration</h3>

<p>A complete overview of cloud-init configuration directives is available at <a href="https://cloudinit.readthedocs.io/en/latest/">https://cloudinit.readthedocs.io/en/latest/</a>.</p>

<p>We&rsquo;ll create a cloud-init configuration file to update all the packages - which is always a good idea - and to add a user to the system.</p>

<p>A cloud-init configuration file has to start with <code>#cloud-config</code>, remember this is YAML so only use spaces&hellip;</p>

<p>We&rsquo;ll create a password hash that we&rsquo;ll put into your cloud-init configuration, it&rsquo;s also possible to use a plain-text password in the configuration with <code>chpasswd</code> or to set the password for the default user. But it&rsquo;s better to use a hash so nobody can see the password. Keep in mind that is still possible to brute-force the password hash.</p>

<p>Some GNU/Linux distributions have the <code>mkpasswd</code> utility this is not available on centos. The <code>mkpasswd</code> utility is part of the <code>expect</code> package and is something else&hellip;</p>

<p>I used a python one-liner to generate the SHA512 password hash</p>

<pre><code>python -c 'import crypt,getpass; print(crypt.crypt(getpass.getpass(), crypt.mksalt(crypt.METHOD_SHA512)))'
</code></pre>

<p>Execute the one-liner and type in your password:</p>

<pre><code>[staf@centos7 ~]$ python -c 'import crypt,getpass; print(crypt.crypt(getpass.getpass(), crypt.mksalt(crypt.METHOD_SHA512)))'
Password: 
&lt;your hash&gt;
[staf@centos7 ~]$ 
</code></pre>

<p>Create config.yaml - replace <code>&lt;your_user&gt;</code>, <code>&lt;your_hash&gt;</code>, <code>&lt;your_ssh_pub_key&gt;</code> -  with your data:</p>

<pre><code>#cloud-config
package_upgrade: true
users:
  - name: &lt;your_user&gt;
    groups: wheel
    lock_passwd: false
    passwd: &lt;your_passord_hash&gt;
    shell: /bin/bash
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    ssh-authorized-keys:
      - &lt;your_public_ssh_key&gt;
</code></pre>

<p>And generate the configuration iso image:</p>

<pre><code>root@centos7 tst]# cloud-localds config.iso config.yaml
wrote config.iso with filesystem=iso9660 and diskformat=raw
[root@centos7 tst]# 
</code></pre>

<h3>Create the virtual system</h3>

<p>Libvirt has predefined definitions for operating systems. You can query the predefined operation systems with the <code>osinfo-query os</code> command.</p>

<p>We use centos 7, we use <code>osinfo-query os</code> to find the correct definition.</p>

<pre><code>[root@centos7 tst]# osinfo-query  os | grep -i centos7
 centos7.0            | CentOS 7.0                                         | 7.0      | http://centos.org/centos/7.0            
[root@centos7 tst]# 
</code></pre>

<p>Create the virtual system:</p>

<pre><code>virt-install \
  --memory 2048 \
  --vcpus 2 \
  --name tst \
  --disk /var/lib/libvirt/images/tst/tst.qcow2,device=disk \
  --disk /var/lib/libvirt/images/tst/config.iso,device=cdrom \
  --os-type Linux \
  --os-variant centos7.0 \
  --virt-type kvm \
  --graphics none \
  --network default \
  --import
</code></pre>

<p>The default escape key - to get out the console is ^[  ( Ctrl + [ )</p>

<p><strong><em> Have fun! </em></strong></p>

<h1>Links</h1>

<ul>
<li><a href="https://wiki.centos.org/Download/Verify">https://wiki.centos.org/Download/Verify</a></li>
<li><a href="https://www.theurbanpenguin.com/using-cloud-images-in-kvm/">https://www.theurbanpenguin.com/using-cloud-images-in-kvm/</a></li>
<li><a href="https://docs.openstack.org/image-guide/">https://docs.openstack.org/image-guide/</a></li>
<li><a href="https://unix.stackexchange.com/questions/52108/how-to-create-sha512-password-hashes-on-command-line#76337">https://unix.stackexchange.com/questions/52108/how-to-create-sha512-password-hashes-on-command-line#76337</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
